#!/usr/bin/env python3
import argparse
from http.server import HTTPServer, BaseHTTPRequestHandler

class Handler(BaseHTTPRequestHandler):
    def _handle(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
        except ValueError:
            content_length = 0
        if content_length:
            self.rfile.read(content_length)
        self.send_response(200)
        self.end_headers()

    # Override send_error so that any error still returns 200 OK.
    def send_error(self, code, message=None, explain=None):
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        self._handle()

    def do_POST(self):
        self._handle()

    def do_PUT(self):
        self._handle()

    def do_DELETE(self):
        self._handle()

    def do_HEAD(self):
        self._handle()

    def do_OPTIONS(self):
        self._handle()

def main():
    parser = argparse.ArgumentParser(
        description="Simple HTTP Server that returns 200 OK for any HTTP method, even when file data is sent."
    )
    parser.add_argument(
        '--port',
        type=int,
        default=8000,
        help='Port number to listen on (default: 8000)'
    )
    args = parser.parse_args()

    server_address = ('', args.port)
    httpd = HTTPServer(server_address, Handler)
    print(f"Server running on port {args.port}...")
    httpd.serve_forever()

if __name__ == '__main__':
    main()
